//Convert BST to Greater Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
    int sum = 0;
    DFS(root, sum);
    return root;
    }
void DFS(TreeNode* root, int& sum){
    if(!root) return;
    DFS(root->right, sum);
    sum = (root->val += sum);
    DFS(root->left, sum);
    }

};







//2nd approach
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sum;
    void inorder(TreeNode* root){
        if(root != NULL){
            inorder(root->right);
            sum += root->val;
            root->val=sum;
            inorder(root->left);
        }
}
TreeNode* convertBST(TreeNode* root){
    sum = 0;
    inorder(root);
    return root;
    }
};


