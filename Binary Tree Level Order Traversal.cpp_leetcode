//Binary Tree Level Order Traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //Level order Traversal Algorithm
 //1. create a empty queue for level order traversal
 //2. push root node in the queue
 //3. Run a loop until queue not become empty
 //a) pop the first node from the queue and display the value of that node
 //b)now check node left is null or not.if null push left node in queue
 //c) now check node right is null or not.if null push right node in queue
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>a;
        if(root==NULL)
        return a;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            vector<int>c;
            int size=q.size();
            for(int i=0; i<size;i++){
            TreeNode*temp=q.front();
            q.pop();
            c.push_back(temp->val);
             if(temp->left!=NULL)
            q.push(temp->left);
            if(temp->right!=NULL)
            q.push(temp->right);
        }
        a.push_back(c);
        
    }
    return a;
    }
};
