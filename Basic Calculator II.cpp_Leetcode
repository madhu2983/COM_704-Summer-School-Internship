//Basic Calculator II Leetcode
//Algorithm to evaluate infinite expression.
//Iterate each character of expression one by one and perform the below task
//1. if the character is an operand , push it to the operand stack
//2.if the character is an opeartor,
//1) If the operator stack is empty then push it to the operator stack.
//2) If the character precedence is greater than the precedence of the operator available in the stack top,then push the character to the operator stack.
//3) If the character precedence is less than or equal to the precedence of the operator available in the stack top then do process:
//1. Pop two values from the top of operand stack and store them im x & y.
//2.Pop operator from the stack.
//3.Perform arithmetic  opertion between x and y and store result in z.
//4.Push result in operand stack.

class Solution {
public:
    stack<char> opr;
    stack<int> op; 

    int precedence(char ch) {
        if (ch == '+' || ch == '-')
            return 1;
        else if (ch == '*' || ch == '/')
            return 2;
        else // This is used in the case of brackets
            return 0;
    }

    int doProcess() {
        int a = op.top();
        op.pop();
        int b = op.top();
        op.pop();
        char ch = opr.top();
        opr.pop();
        if (ch == '+')
            return b + a;
        else if (ch == '-')
            return b - a;
        else if (ch == '*')
            return b * a;
        else
            return b / a;
    }

    int calculate(string s) { 
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == ' ')
                continue;
            else if (isdigit(s[i])) {
                int val = 0;
                while (i < s.length() && isdigit(s[i])) {
                    val = val * 10 + (s[i] - '0');
                    i++;
                }
                i--; // Adjust for the outer loop increment
                op.push(val);
            } else if (s[i] == '(') {
                opr.push(s[i]);
            } else if (s[i] == ')') {
                while (!opr.empty() && opr.top() != '(') {
                    int result = doProcess();
                    op.push(result);
                }
                opr.pop(); // Pop the '(' from the stack
            } else {
                while (!opr.empty() && precedence(s[i])<=precedence(opr.top())) {
                    int result = doProcess();
                    op.push(result);
                }
                opr.push(s[i]);
            }
        }
        
        while (!opr.empty()) {
            int result = doProcess();
            op.push(result);
        }

        return op.top();
    }
};

